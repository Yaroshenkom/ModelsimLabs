module Regfile_16bit (
  output reg [15:0] out,
  output wire [15:0] A_out,
  input reg [15:0] in, DIN_in, G_in,
  input reg [0:9] we,
  input reg [4:0] adr,
  input wire clk);
  
  reg [15:0] mem [0:9];
  reg [4:0] tmp;
  reg [4:0] tmp1;
  
  initial
  begin
    mem[0]=0;
    mem[1]=0;
    mem[2]=0;
    mem[3]=0;
    mem[4]=0;
    mem[5]=0;
    mem[6]=0;
    mem[7]=0;
    mem[8]=0;
    mem[9]=0;
    tmp<=0;
    tmp1<=0;
  end
  
  always @(posedge clk)
  begin
    if (we!=0)
    begin
    if (we==10'b0000000001) mem[9]=G_in;
    else
      begin
    case(we)
      10'b0000000010: tmp<=8; //A
      10'b0000000100: tmp<=7; //R7
      10'b0000001000: tmp<=6;
      10'b0000010000: tmp<=5;
      10'b0000100000: tmp<=4;
      10'b0001000000: tmp<=3;
      10'b0010000000: tmp<=2;
      10'b0100000000: tmp<=1;
      10'b1000000000: tmp<=0; //R0
    endcase
    tmp<=mem[tmp];
    tmp<=in;
    end
    end
  end
  
  assign A_out=mem[8];

  always @(posedge clk) //output MUX
  begin
    if (adr!=0)
    begin
    if(adr==9) out<=DIN_in;
    else 
    begin
    case(adr)
      8: tmp1<=9; //G
      7: tmp1<=7; //R7
      6: tmp1<=6;
      5: tmp1<=5;
      4: tmp1<=4;
      3: tmp1<=3;
      2: tmp1<=2;
      1: tmp1<=1;
      0: tmp1<=0; //R0
    endcase
    tmp1<=mem[tmp1];
    out<=tmp1;
    end
    end
  end
  
endmodule